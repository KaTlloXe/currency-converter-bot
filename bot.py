import telebot
import requests
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from config import TOKEN

bot = telebot.TeleBot(TOKEN)

# –í–∞–ª—é—Ç–∏
SUPPORTED_CURRENCIES = ["UAH", "USD", "EUR", "GBP", "CAD", "PLN", "RON"]

# –°—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
user_states = {}
user_data = {}
user_base_currency = {}

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
MENU_CONVERT = "üîÑ –ö–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ –≤–∞–ª—é—Ç—É"
MENU_RATES = "üìä –ö—É—Ä—Å –≤–∞–ª—é—Ç"
MENU_SETBASE = "‚öôÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –±–∞–∑–æ–≤—É –≤–∞–ª—é—Ç—É"
MENU_HELP = "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞"

# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add(
    KeyboardButton(MENU_CONVERT),
    KeyboardButton(MENU_RATES),
    KeyboardButton(MENU_SETBASE),
    KeyboardButton(MENU_HELP)
)

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –≤–∞–ª—é—Ç
def currency_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for i in range(0, len(SUPPORTED_CURRENCIES), 2):
        buttons = [KeyboardButton(SUPPORTED_CURRENCIES[i])]
        if i + 1 < len(SUPPORTED_CURRENCIES):
            buttons.append(KeyboardButton(SUPPORTED_CURRENCIES[i + 1]))
        kb.row(*buttons)
    return kb

# –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∫—É—Ä—Å–∏
def get_all_rates(base_currency):
    try:
        url = f"https://open.er-api.com/v6/latest/{base_currency}"
        response = requests.get(url)
        data = response.json()
        if data.get("result") == "success":
            return data["rates"]
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫—É—Ä—Å—ñ–≤: {e}")
    return None

# –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –∫—É—Ä—Å
def get_rate(base, target):
    rates = get_all_rates(base)
    return rates.get(target) if rates and target in rates else None

# /start
@bot.message_handler(commands=["start"])
def start(message):
    user_base_currency[message.chat.id] = "UAH"
    bot.send_message(
        message.chat.id,
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç-–∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç.\n–ù–∞—Ç–∏—Å–Ω–∏ /convert –¥–ª—è –ø–æ—á–∞—Ç–∫—É.",
        reply_markup=main_menu
    )

# /help
@bot.message_handler(commands=["help"])
def help_command(message):
    text = (
        "üìò –ö–æ–º–∞–Ω–¥–∏:\n"
        "/convert ‚Äì –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤–∞–ª—é—Ç\n"
        "/rates ‚Äì –∫—É—Ä—Å–∏ –¥–ª—è –±–∞–∑–æ–≤–æ—ó –≤–∞–ª—é—Ç–∏\n"
        "/setbase ‚Äì –∑–º—ñ–Ω–∏—Ç–∏ –±–∞–∑–æ–≤—É –≤–∞–ª—é—Ç—É\n"
        "/help ‚Äì –¥–æ–≤—ñ–¥–∫–∞\n\n"
        "–ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ –≤–∞–ª—é—Ç–∏: UAH, USD, EUR, GBP, CAD, PLN, RON"
    )
    bot.send_message(message.chat.id, text)

# /setbase
@bot.message_handler(commands=["setbase"])
def set_base_currency(message):
    user_states[message.chat.id] = "awaiting_base_set"
    bot.send_message(message.chat.id, "üîß –û–±–µ—Ä–∏ –Ω–æ–≤—É –±–∞–∑–æ–≤—É –≤–∞–ª—é—Ç—É:", reply_markup=currency_keyboard())

# /rates
@bot.message_handler(commands=["rates"])
def rates(message):
    base = user_base_currency.get(message.chat.id, "UAH")
    targets = [cur for cur in SUPPORTED_CURRENCIES if cur != base]
    rates = get_all_rates(base)
    if rates:
        text = f"üìä –ö—É—Ä—Å–∏ 1 {base}:\n"
        for target in targets:
            if target in rates:
                text += f"‚û°Ô∏è {target}: {round(rates[target], 4)}\n"
        bot.send_message(message.chat.id, text)
    else:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫—É—Ä—Å—ñ–≤.")

# /convert
@bot.message_handler(commands=["convert"])
def convert_start(message):
    user_states[message.chat.id] = "awaiting_base_currency"
    bot.send_message(message.chat.id, "üí± –û–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É, —è–∫—É —Ö–æ—á–µ—à –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏:", reply_markup=currency_keyboard())

@bot.message_handler(func=lambda m: True)
def handle_text(message):
    chat_id = message.chat.id
    state = user_states.get(chat_id)
    text = message.text.strip()

    if text == MENU_CONVERT:
        return convert_start(message)
    elif text == MENU_RATES:
        return rates(message)
    elif text == MENU_SETBASE:
        return set_base_currency(message)
    elif text == MENU_HELP:
        return help_command(message)

    if state == "awaiting_base_set":
        currency = message.text.upper()
        if currency in SUPPORTED_CURRENCIES:
            user_base_currency[chat_id] = currency
            bot.send_message(chat_id, f"‚úÖ –ë–∞–∑–æ–≤—É –≤–∞–ª—é—Ç—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {currency}.", reply_markup=main_menu)
        else:
            bot.send_message(chat_id, "‚ùå –ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∞ –≤–∞–ª—é—Ç–∞.")
        user_states[chat_id] = None

    elif state == "awaiting_base_currency":
        base = message.text.upper()
        if base in SUPPORTED_CURRENCIES:
            user_data[chat_id] = {"base": base}
            user_states[chat_id] = "awaiting_target_currency"
            bot.send_message(chat_id, "‚û°Ô∏è –û–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É, –≤ —è–∫—É —Ö–æ—á–µ—à –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏:", reply_markup=currency_keyboard())
        else:
            bot.send_message(chat_id, "‚ùå –í–∞–ª—é—Ç–∞ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è.", reply_markup=main_menu)

    elif state == "awaiting_target_currency":
        target = message.text.upper()
        if target in SUPPORTED_CURRENCIES:
            user_data[chat_id]["target"] = target
            user_states[chat_id] = "awaiting_amount"
            bot.send_message(chat_id, f"üí∞ –í–≤–µ–¥–∏ —Å—É–º—É –≤ {user_data[chat_id]['base']}:", reply_markup=ReplyKeyboardRemove())
        else:
            bot.send_message(chat_id, "‚ùå –í–∞–ª—é—Ç–∞ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è.", reply_markup=main_menu)

    elif state == "awaiting_amount":
        try:
            amount = float(message.text.replace(",", "."))
            if amount <= 0:
                bot.send_message(chat_id, "‚ùó –°—É–º–∞ –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–æ—é –∑–∞ 0.", reply_markup=main_menu)    
                return            
            base = user_data[chat_id]["base"]
            target = user_data[chat_id]["target"]
            rate = get_rate(base, target)
            if rate is not None:
                result = round(amount * rate, 2)
                bot.send_message(chat_id, f"‚úÖ {amount} {base} = {result} {target}", reply_markup=main_menu)
            else:
                bot.send_message(chat_id, "‚ö†Ô∏è –ö—É—Ä—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.")
        except ValueError:
            bot.send_message(chat_id, "‚ùó –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 1000)")
            return  # –Ω–µ —Å–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω
        finally:
            if user_states.get(chat_id) == "awaiting_amount":
                user_states[chat_id] = None
                user_data[chat_id] = {}

    else:
        bot.send_message(chat_id, "‚¨áÔ∏è –û–±–µ—Ä–∏ –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:", reply_markup=main_menu)

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ")
    bot.infinity_polling()
